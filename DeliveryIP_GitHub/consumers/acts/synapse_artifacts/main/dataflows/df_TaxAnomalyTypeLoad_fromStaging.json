{
    "name": "df_TaxAnomalyTypeLoad_fromStaging",
    "properties": {
        "folder": {
            "name": "df_LakeDBLoad/OperationalMapped"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "LS_DataLake",
                        "type": "LinkedServiceReference"
                    },
                    "name": "TaxAnomalyType"
                }
            ],
            "sinks": [
                {
                    "name": "TaxAnomalyTypemap"
                }
            ],
            "transformations": [
                {
                    "name": "RemoveNulls"
                },
                {
                    "name": "GetUniquelist"
                },
                {
                    "name": "CreateTaxAnomalyID"
                },
                {
                    "name": "select1"
                }
            ],
            "scriptLines": [
                "source(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     fileSystem: 'staging',",
                "     wildcardPaths:['Tax/Undefined/TaxAnomalyTypes/*']) ~> TaxAnomalyType",
                "TaxAnomalyType filter(not(isNull(TaxAnomaliesTypes))) ~> RemoveNulls",
                "RemoveNulls aggregate(groupBy(TaxAnomaliesTypes),",
                "     count = count(TaxAnomaliesTypes)) ~> GetUniquelist",
                "GetUniquelist keyGenerate(output(TaxAnomalyTypeId as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> CreateTaxAnomalyID",
                "CreateTaxAnomalyID select(mapColumn(",
                "          TaxAnomalyTypeId,",
                "          TaxAnomaliesTypes",
                "     ),",
                "     skipDuplicateMapInputs: false,",
                "     skipDuplicateMapOutputs: false) ~> select1",
                "select1 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'TaxAnomalyTypes',",
                "     input(",
                "          TaxAnomalyTypeId as long,",
                "          TaxAnomalyTypeName as string",
                "     ),",
                "     mapColumn(",
                "          TaxAnomalyTypeId,",
                "          TaxAnomalyTypeName = TaxAnomaliesTypes",
                "     )) ~> TaxAnomalyTypemap"
            ]
        }
    }
}