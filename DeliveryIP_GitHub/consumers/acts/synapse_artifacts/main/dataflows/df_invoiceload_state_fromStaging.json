{
    "name": "df_invoiceload_state_fromStaging",
    "properties": {
        "folder": {
            "name": "df_LakeDBLoad/OperationalMapped"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "LS_DataLake",
                        "type": "LinkedServiceReference"
                    },
                    "name": "FactInvoice"
                }
            ],
            "sinks": [
                {
                    "name": "State"
                }
            ],
            "transformations": [
                {
                    "name": "StateId"
                },
                {
                    "name": "SelectStateNameID"
                },
                {
                    "name": "aggregate1"
                },
                {
                    "name": "convertStateIdToInt"
                },
                {
                    "name": "filter1"
                }
            ],
            "scriptLines": [
                "source(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     fileSystem: 'staging',",
                "     wildcardPaths:['Tax/Undefined/State/*']) ~> FactInvoice",
                "aggregate1 keyGenerate(output(StateId as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> StateId",
                "convertStateIdToInt select(mapColumn(",
                "          StateId,",
                "          StateName = State",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> SelectStateNameID",
                "filter1 aggregate(groupBy(State = {Sold-To State}),",
                "     {Sold-To State} = count({Sold-To State})) ~> aggregate1",
                "StateId derive(StateId = toInteger(StateId)) ~> convertStateIdToInt",
                "FactInvoice filter(not(isNull({Sold-To State}))) ~> filter1",
                "SelectStateNameID sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'State') ~> State"
            ]
        }
    }
}