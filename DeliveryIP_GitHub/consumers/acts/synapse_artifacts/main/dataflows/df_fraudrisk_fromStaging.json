{
    "name": "df_fraudrisk_fromStaging",
    "properties": {
        "folder": {
            "name": "df_LakeDBLoad/OperationalMapped"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "LS_DataLake",
                        "type": "LinkedServiceReference"
                    },
                    "name": "source1"
                },
                {
                    "name": "Customer"
                }
            ],
            "sinks": [
                {
                    "name": "FraudRisk"
                }
            ],
            "transformations": [
                {
                    "name": "filter1"
                },
                {
                    "name": "select1"
                },
                {
                    "name": "surrogateKey1"
                },
                {
                    "name": "derivedColumn1"
                },
                {
                    "name": "join1"
                }
            ],
            "scriptLines": [
                "source(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     fileSystem: 'staging',",
                "     wildcardPaths:['Tax/Undefined/FraudRiskOutput/*']) ~> source1",
                "source(output(",
                "          CustomerId as long,",
                "          OriginalCustomerID as string,",
                "          CustomerEstablishedDate as date,",
                "          CustomerTypeId as integer,",
                "          ResponsibilityCenterId as integer,",
                "          LedgerId as integer,",
                "          LedgerAccountNumber as string,",
                "          CustomerNote as string,",
                "          PartyId as long,",
                "          GlobalLocationNumber as decimal(13,0)",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'Customer') ~> Customer",
                "source1 filter(not(isNull(TaxpayerID))) ~> filter1",
                "derivedColumn1 select(mapColumn(",
                "          FraudRiskId,",
                "          FraudRiskDate = {Month Year},",
                "          CustomerID = CustomerId,",
                "          FraudRiskFactor = {Anomaly Index},",
                "          FraudRiskScore = {Fraud Risk Score​},",
                "          Sector",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select1",
                "filter1 keyGenerate(output(FraudRiskId as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> surrogateKey1",
                "join1 derive({Month Year} = toDate({Month Year})) ~> derivedColumn1",
                "surrogateKey1, Customer join(TaxpayerID == OriginalCustomerID,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> join1",
                "select1 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'FraudRiskOutput') ~> FraudRisk"
            ]
        }
    }
}