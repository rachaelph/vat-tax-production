{
    "name": "df_loadAuditDetails_fromStaging",
    "properties": {
        "folder": {
            "name": "df_LakeDBLoad/OperationalMapped"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "LS_DataLake",
                        "type": "LinkedServiceReference"
                    },
                    "name": "AuditDetailsource"
                },
                {
                    "name": "CustomerDB"
                }
            ],
            "sinks": [
                {
                    "name": "AuditData"
                }
            ],
            "transformations": [
                {
                    "name": "select1"
                },
                {
                    "name": "join1"
                },
                {
                    "name": "filter1"
                },
                {
                    "name": "onlywithCustomerID"
                },
                {
                    "name": "derivedColumn1"
                }
            ],
            "scriptLines": [
                "source(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     fileSystem: 'staging',",
                "     wildcardPaths:['Tax/Undefined/AuditDetails/*']) ~> AuditDetailsource",
                "source(output(",
                "          CustomerId as long,",
                "          OriginalCustomerID as string,",
                "          CustomerEstablishedDate as date,",
                "          CustomerTypeId as integer,",
                "          ResponsibilityCenterId as integer,",
                "          LedgerId as integer,",
                "          LedgerAccountNumber as string,",
                "          CustomerNote as string,",
                "          PartyId as long,",
                "          GlobalLocationNumber as decimal(13,0)",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'Customer') ~> CustomerDB",
                "derivedColumn1 select(mapColumn(",
                "          CustomerId,",
                "          DateofAction = {Month Year},",
                "          TaxpayerId = TaxpayerID,",
                "          {Auditor​ID} = {Auditor​},",
                "          AuditorAction = {Auditor action​},",
                "          AuditorSupervisor = {Auditor Supervisor​},",
                "          PenaltyCharged = {Penalty charged​},",
                "          TimeToClose = {Time to close​},",
                "          ClosingApprovedBy = {Closing approved by​},",
                "          AdditionalPenaltyAction = {Additional Penalty / Action},",
                "          RemarksFindings = {Remarks/Findings},",
                "          Sector",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select1",
                "filter1, CustomerDB join(TaxpayerID == OriginalCustomerID,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> join1",
                "AuditDetailsource filter(not(isNull(TaxpayerID))) ~> filter1",
                "join1 filter(not(isNull(CustomerId))) ~> onlywithCustomerID",
                "onlywithCustomerID derive({Month Year} = toDate({Month Year})) ~> derivedColumn1",
                "select1 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'AuditDetails',",
                "     input(",
                "          CustomerId as long,",
                "          TaxpayerId as string,",
                "          AuditorID as string,",
                "          AuditorAction as string,",
                "          AuditorSupervisor as string,",
                "          PenaltyCharged as string,",
                "          TimeToClose as string,",
                "          ClosingApprovedBy as string,",
                "          AdditionalPenaltyAction as string,",
                "          RemarksFindings as string,",
                "          Mark as string,",
                "          DateofAction as date,",
                "          Sector as string",
                "     ),",
                "     mapColumn(",
                "          CustomerId,",
                "          TaxpayerId,",
                "          AuditorID = {Auditor​ID},",
                "          AuditorAction,",
                "          AuditorSupervisor,",
                "          PenaltyCharged,",
                "          TimeToClose,",
                "          ClosingApprovedBy,",
                "          AdditionalPenaltyAction,",
                "          RemarksFindings,",
                "          Sector,",
                "          DateofAction",
                "     )) ~> AuditData"
            ]
        }
    }
}