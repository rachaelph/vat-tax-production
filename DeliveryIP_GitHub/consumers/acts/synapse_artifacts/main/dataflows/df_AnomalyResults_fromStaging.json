{
    "name": "df_AnomalyResults_fromStaging",
    "properties": {
        "folder": {
            "name": "df_LakeDBLoad/OperationalMapped"
        },
        "type": "MappingDataFlow",
        "typeProperties": {
            "sources": [
                {
                    "linkedService": {
                        "referenceName": "LS_DataLake",
                        "type": "LinkedServiceReference"
                    },
                    "name": "AnomalyResults"
                },
                {
                    "name": "Customer"
                },
                {
                    "name": "AnomalyType"
                },
                {
                    "name": "sector"
                }
            ],
            "sinks": [
                {
                    "name": "AnomalyResultDB"
                }
            ],
            "transformations": [
                {
                    "name": "select1"
                },
                {
                    "name": "surrogateKey1"
                },
                {
                    "name": "lookupAnomalyType"
                },
                {
                    "name": "select2"
                },
                {
                    "name": "LookupSector"
                },
                {
                    "name": "derivedColumn1"
                },
                {
                    "name": "join1"
                },
                {
                    "name": "filter1"
                },
                {
                    "name": "aggregate1"
                }
            ],
            "scriptLines": [
                "source(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     ignoreNoFilesFound: false,",
                "     format: 'parquet',",
                "     fileSystem: 'staging',",
                "     wildcardPaths:['Tax/Undefined/AnomalyResults/*']) ~> AnomalyResults",
                "source(output(",
                "          CustomerId as long,",
                "          OriginalCustomerID as string,",
                "          CustomerEstablishedDate as date,",
                "          CustomerTypeId as integer,",
                "          ResponsibilityCenterId as integer,",
                "          LedgerId as integer,",
                "          LedgerAccountNumber as string,",
                "          CustomerNote as string,",
                "          PartyId as long,",
                "          GlobalLocationNumber as decimal(13,0)",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'Customer') ~> Customer",
                "source(output(",
                "          TaxAnomalyTypeId as long,",
                "          TaxAnomalyTypeName as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'TaxAnomalyTypes') ~> AnomalyType",
                "source(output(",
                "          TaxpayerId as string,",
                "          StateId as string,",
                "          StateName as string,",
                "          Date as date,",
                "          Sector as string",
                "     ),",
                "     allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'TaxpayerStateSector') ~> sector",
                "aggregate1 select(mapColumn(",
                "          {Reporting Month},",
                "          {Invoice Date},",
                "          TaxpayerID,",
                "          {Sold-To State},",
                "          TaxAmount,",
                "          Sector1 = Sector,",
                "          FlaggedproductCategory,",
                "          TaxAnomaliesTypes,",
                "          VATTarget",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select1",
                "LookupSector keyGenerate(output(AnomalyResultID as long),",
                "     startAt: 1L,",
                "     stepValue: 1L) ~> surrogateKey1",
                "join1, AnomalyType lookup(TaxAnomaliesTypes == TaxAnomalyTypeName,",
                "     multiple: false,",
                "     pickup: 'any',",
                "     broadcast: 'auto')~> lookupAnomalyType",
                "derivedColumn1 select(mapColumn(",
                "          AnomalyResultID,",
                "          CustomerID = CustomerId,",
                "          AnomalyResult = FlaggedproductCategory,",
                "          State = {Sold-To State},",
                "          Sector = Sector1,",
                "          Date = {Invoice Date},",
                "          TaxAnomalyTypeID = TaxAnomalyTypeId,",
                "          TaxAnomalyTypeName,",
                "          VAT = TaxAmount",
                "     ),",
                "     skipDuplicateMapInputs: true,",
                "     skipDuplicateMapOutputs: true) ~> select2",
                "lookupAnomalyType, sector lookup(Sector1 == Sector,",
                "     multiple: false,",
                "     pickup: 'any',",
                "     broadcast: 'auto')~> LookupSector",
                "surrogateKey1 derive({Invoice Date} = toDate({Invoice Date})) ~> derivedColumn1",
                "select1, Customer join(TaxpayerID == OriginalCustomerID,",
                "     joinType:'inner',",
                "     matchType:'exact',",
                "     ignoreSpaces: false,",
                "     broadcast: 'auto')~> join1",
                "AnomalyResults filter(TaxpayerID != '#N/A') ~> filter1",
                "filter1 aggregate(groupBy({Reporting Month},",
                "          {Invoice Number},",
                "          {Invoice Date},",
                "          TaxpayerID,",
                "          {Sold-To State},",
                "          TaxableAmount,",
                "          TaxAmount,",
                "          {SKU Number},",
                "          Sector,",
                "          FlaggedproductCategory,",
                "          TaxAnomaliesTypes,",
                "          VATTarget),",
                "     Count = count(TaxpayerID)) ~> aggregate1",
                "select2 sink(allowSchemaDrift: true,",
                "     validateSchema: false,",
                "     store: 'synapse',",
                "     databaseType: 'spark',",
                "     format: 'table',",
                "     database: 'EnterpriseTaxModel',",
                "     tableName: 'AnomalyResults',",
                "     mapColumn(",
                "          AnomalyResultID,",
                "          CustomerID,",
                "          AnomalyResult,",
                "          State,",
                "          Sector,",
                "          Date,",
                "          TaxAnomalyTypeID,",
                "          TaxAnomalyTypeName,",
                "          VAT",
                "     )) ~> AnomalyResultDB"
            ]
        }
    }
}